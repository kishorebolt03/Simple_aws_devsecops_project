version: 2.1
jobs:
  build-image: #Job for building a docker image to be used inside Lambda 
    docker:
      - image: cimg/base:current-22.04 # using the ubuntu 22.04 as we need docker
    working_directory: /home/circleci/project
    steps:
      - checkout #copy the code from github into this container
      - run:
          name: Update OS # Continious update of the image
          command: |
            sudo apt update
            sudo apt install unzip curl wget  -y
      - run:
          name: Install AWS CLI  # Installing AWS CLI to push images into ECR
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" #downloading AWS CLI from original source
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: ECR login #Docker login into AWS ECR to push the image
          command: |
            docker login --username AWS -p $(AWS_ACCESS_KEY_ID=$ECR_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$ECR_AWS_SECRET_ACCESS_KEY aws ecr get-login-password --region us-east-1) "$ECR_ACCOUNT_URL"

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true #Using CircleCI's caching will help in speeding up the deployment process in CI/CD. 
      - run:
          name: Docker build
          command: |
              docker build --no-cache -t "$ECR_ACCOUNT_URL/$ECR_REPO":latest . 
              docker push "$ECR_ACCOUNT_URL/$ECR_REPO":latest

  build-and-deploy-infra: #Jon for build and deploy using terraform
    docker:
      - image: $ECR_TF_IMAGE # Custom docker image used for terraform as the 
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY

    steps:
      - checkout
      # Replace this with steps to build a package, or executable
      - run:
          name: Install and Setup AWS creds
          command: |
              apk update && apk add --no-cache aws-cli && aws --version
              aws configure set region $REGION 
              aws configure set aws_access_key_id $ECR_AWS_ACCESS_KEY_ID 
              aws configure set aws_secret_access_key $ECR_AWS_SECRET_ACCESS_KEY 
              aws configure list
          no_output_timeout: 20m
      - run:
          name: terraform init
          command: cd /root/project/.terraform; terraform init
      - run:
          name: terraform plan
          command: cd /root/project/.terraform; terraform plan -out plan.out
      - run:
          name: terraform apply
          command: cd /root/project/.terraform; terraform apply plan.out

  trivy-dependency-scan:
    description: Trivy Vulnerable Scanner  
    docker:
      - image: "aquasec/trivy"
    steps:
      - checkout
      - run:
          name: Install and run Trivy
          command: |
            mkdir -p /tmp/artifacts
            # file system andpackage check
            if trivy fs --scanners vuln,secret,misconfig . > /tmp/artifacts/trivy_report ; then echo "#"; exit 0; else echo "Trivy Run Successfully" exit 0; fi            
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  build-and-deploy-worflow:
    jobs:
      - build-image:
          filters:
            branches:
              only:
                - main
      - build-and-deploy-infra:
          requires:
            - build-image
            - trivy-dependency-scan
      - trivy-dependency-scan:
          filters:
            branches:
              only:
                - /test.*/
                - main 
