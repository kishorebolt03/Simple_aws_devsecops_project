# Couldn't automatically generate a config from your source code.
# This is a generic template to serve as a base for your custom config
# See: https://circleci.com/docs/configuration-reference
version: 2.1
jobs:
  build-image:
    docker:
      - image: cimg/base:current-22.04
    working_directory: /home/circleci/project
    steps:
      - checkout
      - run:
          name: Update OS
          command: |
            sudo apt update
            sudo apt install unzip curl wget  -y
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: ECR login
          command: |
            docker login --username AWS -p $(AWS_ACCESS_KEY_ID=$ECR_AWS_ACCESS_KEY AWS_SECRET_ACCESS_KEY=$ECR_AWS_SECRET_KEY aws ecr get-login-password --region us-east-1) $ECR_ACCOUNT_URL

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Docker build
          command: |
              docker build --no-cache -t "$ECR_ACCOUNT_URL/$ECR_REPO":latest .
              docker push "$ECR_ACCOUNT_URL/$ECR_REPO":latest


  build-and-deploy-infra:
    docker:
      - image: $ECR_TF_IMAGE
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY

    steps:
      - checkout
      # Replace this with steps to build a package, or executable
      - run:
          name: Install and Setup AWS creds
          command: |
              apk update && apk add --no-cache aws-cli && aws --version
              aws configure set region $REGION 
              aws configure set aws_access_key_id $ECR_AWS_ACCESS_KEY_ID 
              aws configure set aws_secret_access_key $ECR_AWS_SECRET_ACCESS_KEY 
              aws configure list
          no_output_timeout: 20m
      - run:
          name: terraform init
          command: cd /root/project/.terraform; terraform init
      - run:
          name: terraform plan
          command: cd /root/project/.terraform; terraform plan -out plan.out
      - run:
          name: terraform apply
          command: cd /root/project/.terraform; terraform apply plan.out

  trivy-dependency-scan:
    description: Trivy Vulnerable Scanner  
    docker:
      - image: "aquasec/trivy"
    steps:
      - checkout
      - run:
          name: Install and run Trivy
          command: |
            mkdir -p /tmp/artifacts
            # file system andpackage check
            if trivy fs --scanners vuln,secret,misconfig . > /tmp/artifacts/trivy_report ; then echo "#"; exit 0; else echo "Trivy Run Successfully" exit 0; fi            
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  build-and-deploy-worflow:
    jobs:
      - build-image:
          filters:
            branches:
              only:
                - main
      - build-and-deploy-infra:
          requires:
            - build-image
            - trivy-dependency-scan
      - trivy-dependency-scan:
          filters:
            branches:
              only:
                - /test.*/
                - main 
